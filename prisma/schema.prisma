generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  NOTARY
  SECRETARY
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum CertificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotaryApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  APPOINTMENT_CREATED
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  APPOINTMENT_COMPLETED
  DOCUMENT_UPLOADED
  CERTIFICATION_APPROVED
  NEW_MESSAGE
  SYSTEM_ALERT
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notaryProfile      NotaryProfile?
  appointments       Appointment[]  @relation("CustomerAppointments")
  notaryAppointments Appointment[]  @relation("NotaryAppointments")
  reviews            Review[]
  documents          Document[]     @relation("CustomerDocuments")
  notifications      Notification[]
}

model NotaryProfile {
  id              String               @id @default(cuid())
  userId          String               @unique
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  isApproved      Boolean              @default(false)
  approvalStatus  NotaryApprovalStatus @default(PENDING)
  rejectionReason String?
  address         String
  city            String
  state           String
  zip             String
  hourlyRate      Float
  averageRating   Float                @default(0)
  bio             String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  certifications NotaryCertification[]
  notaryServices NotaryService[]
}

model Certification {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  notaries NotaryCertification[]
}

model NotaryCertification {
  id              String              @id @default(cuid())
  notaryProfileId String
  certificationId String
  dateObtained    DateTime?
  documentUrl     String?
  status          CertificationStatus @default(PENDING)
  createdAt       DateTime            @default(now())

  notaryProfile NotaryProfile @relation(fields: [notaryProfileId], references: [id], onDelete: Cascade)
  certification Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@unique([notaryProfileId, certificationId])
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  basePrice   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
  notaries     NotaryService[]
}

model NotaryService {
  id              String   @id @default(cuid())
  notaryProfileId String
  serviceId       String
  customPrice     Float?
  createdAt       DateTime @default(now())

  notaryProfile NotaryProfile @relation(fields: [notaryProfileId], references: [id], onDelete: Cascade)
  service       Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([notaryProfileId, serviceId])
}

model Appointment {
  id            String            @id @default(cuid())
  customerId    String
  notaryId      String
  serviceId     String
  scheduledTime DateTime
  duration      Int
  status        AppointmentStatus @default(PENDING)
  totalCost     Float
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  customer  User       @relation("CustomerAppointments", fields: [customerId], references: [id])
  notary    User       @relation("NotaryAppointments", fields: [notaryId], references: [id])
  service   Service    @relation(fields: [serviceId], references: [id])
  reviews   Review[]
  documents Document[] @relation("AppointmentDocuments")
}

model Review {
  id            String   @id @default(cuid())
  appointmentId String
  customerId    String
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  customer    User        @relation(fields: [customerId], references: [id])
}

model Document {
  id            String   @id @default(cuid())
  customerId    String
  fileName      String
  originalName  String
  fileSize      Int
  fileType      String
  fileUrl       String
  appointmentId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer    User         @relation("CustomerDocuments", fields: [customerId], references: [id])
  appointment Appointment? @relation("AppointmentDocuments", fields: [appointmentId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  actionUrl String?
  metadata  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])
}
